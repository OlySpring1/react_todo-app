{"version":3,"sources":["Todo.js","TodoList.js","Header.js","Footer.js","App.js","index.js"],"names":["Todo","state","value","props","title","isClicked","myRef","React","createRef","handleClick","event","preventDefault","setState","prevState","editTitle","target","prevProps","this","current","focus","id","completed","onSelected","deleteTodo","saveChangesTodo","className","cn","editing","type","checked","onChange","htmlFor","onDoubleClick","onClick","onBlur","ref","onKeyPress","Component","defaultProps","TodoList","isToggleOn","onAllSelected","todos","onTodoChecked","completedStatus","map","todo","key","e","Header","handleTitle","trim","handleSubmit","length","onTodo","Date","onSubmit","placeholder","buttonsFilter","href","text","Footer","noComlpetedTodo","onFilteredTodos","clearCompleted","visibleClearCompleted","filterType","button","selected","App","addTodo","todoId","todoTitle","select","getVisibleTodos","filter","every","some","incompleteTodosSum","visibleTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f42ca991.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nclass Todo extends React.Component {\n  state = {\n    value: this.props.title,\n    isClicked: false,\n  }\n\n  myRef = React.createRef();\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.isClicked !== prevState.isClicked) {\n      this.myRef.current.focus();\n    }\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    this.setState(prevState => ({\n      isClicked: !prevState.isClicked,\n    }));\n  }\n\n  editTitle = ({ target }) => {\n    this.setState({\n      value: target.value,\n    });\n  }\n\n  render() {\n    const {\n      id,\n      title,\n      completed,\n      onSelected,\n      deleteTodo,\n      saveChangesTodo,\n    } = this.props;\n\n    const { isClicked } = this.state;\n\n    return (\n      <li className={cn({ completed }, { editing: isClicked })}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={completed}\n            onChange={onSelected}\n          />\n          <label\n            htmlFor={id}\n            onDoubleClick={this.handleClick}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={deleteTodo}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          onBlur={this.handleClick}\n          value={this.state.value}\n          ref={this.myRef}\n          onChange={this.editTitle}\n          onKeyPress={saveChangesTodo}\n        />\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  isClicked: PropTypes.bool.isRequired,\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  onSelected: PropTypes.func,\n  deleteTodo: PropTypes.func,\n  saveChangesTodo: PropTypes.func,\n};\n\nTodo.defaultProps = {\n  onSelected: null,\n  deleteTodo: null,\n  saveChangesTodo: () => {},\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nclass TodoList extends React.Component {\n  state = {\n    isToggleOn: true,\n  }\n\n  handleClick = () => {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn,\n    }));\n\n    this.props.onAllSelected(this.state.isToggleOn);\n  }\n\n  render() {\n    const {\n      todos,\n      onTodoChecked,\n      deleteTodo,\n      saveChangesTodo,\n      // selectEditField,\n    } = this.props;\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={this.props.completedStatus}\n          value={this.state.isToggleOn}\n          onChange={this.handleClick}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {todos.map(todo => (\n            <Todo\n              {...todo}\n              key={todo.id}\n              onSelected={e => onTodoChecked(todo.id, e)}\n              deleteTodo={() => deleteTodo(todo.id)}\n              saveChangesTodo={e => (\n                saveChangesTodo(e, todo.id, this.state.value)\n              )}\n\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  })),\n  completedStatus: PropTypes.bool.isRequired,\n  onAllSelected: PropTypes.func.isRequired,\n  onTodoChecked: PropTypes.func.isRequired,\n  saveChangesTodo: PropTypes.func,\n  deleteTodo: PropTypes.func,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n  deleteTodo: null,\n  saveChangesTodo: () => {},\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state={\n    title: '',\n    id: '',\n    completed: false,\n  }\n\n  handleTitle = ({ target }) => (\n    this.setState({\n      title: target.value.trim(),\n    })\n  )\n\n  handleSubmit = (event) => {\n    const { title } = this.state;\n\n    event.preventDefault();\n\n    if (title.length === 0) {\n      return;\n    }\n\n    this.props.onTodo({\n      ...this.state,\n      id: +new Date(),\n    });\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={this.handleTitle}\n          />\n        </header>\n      </form>\n\n    );\n  }\n}\n\nHeader.propTypes = {\n  onTodo: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames/bind';\n\nconst buttonsFilter = [\n  {\n    href: '#/',\n    text: 'All',\n  },\n  {\n    href: '#/active',\n    text: 'Active',\n  },\n  {\n    href: '#/completed',\n    text: 'Completed',\n  },\n];\n\nconst Footer = ({\n  noComlpetedTodo,\n  onFilteredTodos,\n  clearCompleted,\n  visibleClearCompleted,\n  filterType,\n}) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {noComlpetedTodo}\n      {' '}\n      items left\n    </span>\n\n    <ul className=\"filters\">\n      {buttonsFilter.map(button => (\n        <li key={button.text}>\n          <a\n            href={button.href}\n            className={cn({ selected: filterType === `${button.text}` })}\n            onClick={e => onFilteredTodos(e.target.text)}\n          >\n            {button.text}\n          </a>\n        </li>\n      ))}\n    </ul>\n    {visibleClearCompleted\n        && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={clearCompleted}\n          >\n            Clear completed\n          </button>\n        )\n    }\n  </footer>\n);\n\nFooter.propTypes = {\n  noComlpetedTodo: PropTypes.number.isRequired,\n  onFilteredTodos: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  visibleClearCompleted: PropTypes.bool.isRequired,\n  filterType: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Header from './Header';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filterType: 'All',\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  saveChangesTodo = (e, todoId, todoTitle) => {\n    const title = e.target.value;\n\n    if (e.key === 'Enter') {\n      this.setState(prevState => ({\n        todos: prevState.todos.map((todo) => {\n          if (todo.id === todoId) {\n            return {\n              ...todo,\n              title,\n            };\n          }\n\n          return todo;\n        }),\n      }));\n    }\n  }\n\n  onTodoChecked = (todoId, e) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  onAllSelected = (select) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: select,\n      })),\n    }));\n  }\n\n  onFilteredTodos = (filterType) => {\n    this.setState({\n      filterType,\n    });\n  }\n\n  getVisibleTodos = () => {\n    const { todos, filterType } = this.state;\n\n    if (filterType === 'Active') {\n      return todos.filter(todo => !todo.completed);\n    }\n\n    if (filterType === 'Completed') {\n      return todos.filter(todo => todo.completed);\n    }\n\n    return todos;\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const { todos, filterType } = this.state;\n    const completedStatus = todos.length === 0\n      ? false\n      : todos.every(todo => todo.completed);\n    const visibleClearCompleted = todos.some(todo => todo.completed);\n    const incompleteTodosSum = todos.filter(todo => !todo.completed).length;\n    const visibleTodos = this.getVisibleTodos(filterType);\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          onTodo={this.addTodo}\n        />\n        <TodoList\n          todos={visibleTodos}\n          completedStatus={completedStatus}\n          onFilteredTodos={this.onFilteredTodos}\n          onAllSelected={this.onAllSelected}\n          onTodoChecked={this.onTodoChecked}\n          deleteTodo={this.deleteTodo}\n          saveChangesTodo={this.saveChangesTodo}\n\n        />\n\n        <Footer\n          noComlpetedTodo={incompleteTodosSum}\n          onFilteredTodos={this.onFilteredTodos}\n          clearCompleted={this.clearCompleted}\n          visibleClearCompleted={visibleClearCompleted}\n          filterType={filterType}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}