{"version":3,"sources":["Todo.js","TodoList.js","Header.js","Footer.js","App.js","index.js"],"names":["Todo","state","value","isClicked","handleClick","title","setState","prevState","editTitle","target","handleBlur","id","finishEditedTodo","todoId","length","props","saveChangesTodo","deleteTodo","onKeyDown","e","key","this","completed","onSelected","className","cn","editing","type","checked","onChange","onDoubleClick","onClick","onBlur","defaultValue","autoFocus","React","Component","defaultProps","TodoList","todos","onTodoChecked","map","todo","Header","handleTitle","trim","handleSubmit","event","preventDefault","onTodo","Date","onSubmit","placeholder","buttonsFilter","href","text","Footer","noComlpetedTodo","onFilteredTodos","clearCompleted","visibleClearCompleted","filterType","button","selected","App","addTodo","todoTitle","onAllSelected","completedStatusTodos","getVisibleTodos","filter","initialDisplay","every","some","incompleteTodosSum","visibleTodos","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.244c1c2f.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nclass Todo extends React.Component {\n  state = {\n    value: '',\n    isClicked: false,\n  }\n\n  handleClick = (title) => {\n    this.setState(prevState => ({\n      isClicked: !prevState.isClicked,\n      value: title,\n    }));\n  }\n\n  editTitle = ({ target }) => {\n    this.setState({\n      value: target.value,\n    });\n  }\n\n   handleBlur = (id) => {\n     this.finishEditedTodo(id);\n   }\n\n  finishEditedTodo = (todoId) => {\n    const { value } = this.state;\n\n    if (value.length > 0) {\n      this.props.saveChangesTodo(todoId, value);\n      this.handleClick();\n    } else {\n      this.props.deleteTodo(todoId);\n      this.handleClick();\n    }\n  }\n\n  onKeyDown = (e, id) => {\n    if (e.key === 'Enter') {\n      this.finishEditedTodo(id);\n    }\n\n    if (e.key === 'Escape') {\n      this.handleClick();\n    }\n  }\n\n  render() {\n    const {\n      id,\n      title,\n      completed,\n      onSelected,\n      deleteTodo,\n    } = this.props;\n\n    const { isClicked } = this.state;\n\n    return (\n      <li className={cn({ completed }, { editing: isClicked })}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={completed}\n            onChange={onSelected}\n          />\n          <label\n            onDoubleClick={() => this.handleClick(title)}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTodo(id)}\n          />\n        </div>\n        {isClicked && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            onBlur={() => this.handleBlur(id)}\n            defaultValue={title}\n            onChange={this.editTitle}\n            onKeyDown={e => this.onKeyDown(e, id)}\n            /* eslint-disable jsx-a11y/no-autofocus */\n            autoFocus\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  onSelected: PropTypes.func,\n  deleteTodo: PropTypes.func,\n  saveChangesTodo: PropTypes.func,\n};\n\nTodo.defaultProps = {\n  onSelected: () => {},\n  deleteTodo: () => {},\n  saveChangesTodo: () => {},\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({\n  todos,\n  onTodoChecked,\n  deleteTodo,\n  saveChangesTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        {...todo}\n        key={todo.id}\n        onSelected={e => onTodoChecked(todo.id, e)}\n        deleteTodo={deleteTodo}\n        saveChangesTodo={saveChangesTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  })),\n  onTodoChecked: PropTypes.func.isRequired,\n  saveChangesTodo: PropTypes.func,\n  deleteTodo: PropTypes.func,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n  deleteTodo: null,\n  saveChangesTodo: () => { },\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state={\n    title: '',\n    id: '',\n    completed: false,\n  }\n\n  handleTitle = ({ target }) => (\n    this.setState({\n      title: target.value.trim(),\n    })\n  )\n\n  handleSubmit = (event) => {\n    const { title } = this.state;\n\n    event.preventDefault();\n\n    if (title.length === 0) {\n      return;\n    }\n\n    this.props.onTodo({\n      ...this.state,\n      id: +new Date(),\n    });\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={this.handleTitle}\n          />\n        </header>\n      </form>\n\n    );\n  }\n}\n\nHeader.propTypes = {\n  onTodo: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames/bind';\n\nconst buttonsFilter = [\n  {\n    href: '#/',\n    text: 'All',\n  },\n  {\n    href: '#/active',\n    text: 'Active',\n  },\n  {\n    href: '#/completed',\n    text: 'Completed',\n  },\n];\n\nconst Footer = ({\n  noComlpetedTodo,\n  onFilteredTodos,\n  clearCompleted,\n  visibleClearCompleted,\n  filterType,\n}) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {noComlpetedTodo}\n      {' '}\n      items left\n    </span>\n\n    <ul className=\"filters\">\n      {buttonsFilter.map(button => (\n        <li key={button.text}>\n          <a\n            href={button.href}\n            className={cn({ selected: filterType === `${button.text}` })}\n            onClick={e => onFilteredTodos(e.target.text)}\n          >\n            {button.text}\n          </a>\n        </li>\n      ))}\n    </ul>\n    {visibleClearCompleted\n        && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={clearCompleted}\n          >\n            Clear completed\n          </button>\n        )\n    }\n  </footer>\n);\n\nFooter.propTypes = {\n  noComlpetedTodo: PropTypes.number.isRequired,\n  onFilteredTodos: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  visibleClearCompleted: PropTypes.bool.isRequired,\n  filterType: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Header from './Header';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filterType: 'All',\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  saveChangesTodo = (todoId, todoTitle) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            title: todoTitle,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  onTodoChecked = (todoId, e) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  onAllSelected = (completedStatusTodos) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: !completedStatusTodos,\n      })),\n    }));\n  }\n\n  onFilteredTodos = (filterType) => {\n    this.setState({\n      filterType,\n    });\n  }\n\n  getVisibleTodos = () => {\n    const { todos, filterType } = this.state;\n\n    if (filterType === 'Active') {\n      return todos.filter(todo => !todo.completed);\n    }\n\n    if (filterType === 'Completed') {\n      return todos.filter(todo => todo.completed);\n    }\n\n    return todos;\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const { todos, filterType } = this.state;\n    const initialDisplay = (todos.length === 0);\n    const completedStatusTodos = this.state.todos.length === 0\n      ? false\n      : this.state.todos.every(todo => todo.completed);\n\n    const visibleClearCompleted = todos.some(todo => todo.completed);\n    const incompleteTodosSum = todos.filter(todo => !todo.completed).length;\n    const visibleTodos = this.getVisibleTodos(filterType);\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          onTodo={this.addTodo}\n        />\n\n        <section className=\"main\">\n          {!initialDisplay && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                checked={completedStatusTodos}\n                onChange={() => this.onAllSelected(completedStatusTodos)}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n          <TodoList\n            todos={visibleTodos}\n            initialDisplay={initialDisplay}\n            onFilteredTodos={this.onFilteredTodos}\n            onTodoChecked={this.onTodoChecked}\n            deleteTodo={this.deleteTodo}\n            saveChangesTodo={this.saveChangesTodo}\n          />\n        </section>\n\n        {\n          !initialDisplay\n          && (\n            <Footer\n              noComlpetedTodo={incompleteTodosSum}\n              onFilteredTodos={this.onFilteredTodos}\n              clearCompleted={this.clearCompleted}\n              visibleClearCompleted={visibleClearCompleted}\n              filterType={filterType}\n            />\n          )\n        }\n\n      </section>\n    );\n  }\n}\n\n// App.propTypes = {\n//   completedStatusTodos: PropTypes.bool.isRequired,\n// };\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}