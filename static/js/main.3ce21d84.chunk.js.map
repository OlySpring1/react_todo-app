{"version":3,"sources":["Todo.jsx","TodoList.jsx","Header.jsx","Footer.jsx","App.jsx","index.js"],"names":["Todo","state","value","isClicked","handleClick","todoTitle","setState","prevState","editTitle","target","handleBlur","todoId","finishEditedTodo","length","props","saveChangesTodo","deleteTodo","onKeyDown","e","key","this","id","title","completed","changesStatusTodo","className","cn","editing","type","checked","onChange","onDoubleClick","onClick","onBlur","defaultValue","autoFocus","React","Component","defaultProps","TodoList","todos","map","todo","Header","handleTitle","trim","handleSubmit","event","preventDefault","addTodo","onSubmit","placeholder","buttonsFilter","href","text","Footer","noComlpetedTodo","setFilter","clearCompleted","visibleClearCompleted","filterType","button","selected","filterTypes","App","makeIdTodo","maxId","Math","max","Infinity","selectAllTodos","completedStatusTodos","getVisibleTodos","filter","data","JSON","parse","localStorage","getItem","setItem","stringify","initialDisplay","every","some","incompleteTodosSum","visibleTodos","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ce21d84.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nclass Todo extends React.Component {\n  state = {\n    value: '',\n    isClicked: false,\n  }\n\n  handleClick = (todoTitle) => {\n    this.setState(prevState => ({\n      isClicked: !prevState.isClicked,\n      value: todoTitle,\n    }));\n  }\n\n  editTitle = ({ target }) => {\n    this.setState({\n      value: target.value,\n    });\n  }\n\n   handleBlur = (todoId) => {\n     this.finishEditedTodo(todoId);\n   }\n\n  finishEditedTodo = (todoId) => {\n    const { value } = this.state;\n\n    if (value.length > 0) {\n      this.props.saveChangesTodo(todoId, value);\n      this.handleClick();\n    } else {\n      this.props.deleteTodo(todoId);\n      this.handleClick();\n    }\n  }\n\n  onKeyDown = (e, todoId) => {\n    if (e.key === 'Enter') {\n      this.finishEditedTodo(todoId);\n    }\n\n    if (e.key === 'Escape') {\n      this.handleClick();\n    }\n  }\n\n  render() {\n    const {\n      id,\n      title,\n      completed,\n      changesStatusTodo,\n      deleteTodo,\n    } = this.props;\n\n    const { isClicked } = this.state;\n\n    return (\n      <li className={cn({ completed }, { editing: isClicked })}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={completed}\n            onChange={changesStatusTodo}\n          />\n          <label\n            onDoubleClick={() => this.handleClick(title)}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTodo(id)}\n          />\n        </div>\n        {isClicked && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            onBlur={() => this.handleBlur(id)}\n            defaultValue={title}\n            onChange={this.editTitle}\n            onKeyDown={e => this.onKeyDown(e, id)}\n            /* eslint-disable jsx-a11y/no-autofocus */\n            autoFocus\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changesStatusTodo: PropTypes.func,\n  deleteTodo: PropTypes.func,\n  saveChangesTodo: PropTypes.func,\n};\n\nTodo.defaultProps = {\n  changesStatusTodo: () => {},\n  deleteTodo: () => {},\n  saveChangesTodo: () => {},\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({\n  todos,\n  changesStatusTodo,\n  deleteTodo,\n  saveChangesTodo,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        {...todo}\n        key={todo.id}\n        changesStatusTodo={() => changesStatusTodo(todo.id)}\n        deleteTodo={deleteTodo}\n        saveChangesTodo={saveChangesTodo}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  })),\n  changesStatusTodo: PropTypes.func.isRequired,\n  saveChangesTodo: PropTypes.func,\n  deleteTodo: PropTypes.func,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n  deleteTodo: null,\n  saveChangesTodo: () => { },\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state={\n    title: '',\n    id: '',\n    completed: false,\n  }\n\n  handleTitle = ({ target }) => (\n    this.setState({\n      title: target.value.trim(),\n    })\n  )\n\n  handleSubmit = (event) => {\n    const { title } = this.state;\n    const { todoId } = this.props;\n\n    event.preventDefault();\n\n    if (title.length === 0) {\n      return;\n    }\n\n    this.props.addTodo({\n      ...this.state,\n      id: todoId + 1,\n    });\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={this.handleTitle}\n          />\n        </header>\n      </form>\n\n    );\n  }\n}\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n  todoId: PropTypes.number.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames/bind';\n\nconst buttonsFilter = [\n  {\n    href: '#/',\n    text: 'All',\n  },\n  {\n    href: '#/active',\n    text: 'Active',\n  },\n  {\n    href: '#/completed',\n    text: 'Completed',\n  },\n];\n\nconst Footer = ({\n  noComlpetedTodo,\n  setFilter,\n  clearCompleted,\n  visibleClearCompleted,\n  filterType,\n}) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {noComlpetedTodo}\n      {' '}\n      items left\n    </span>\n\n    <ul className=\"filters\">\n      {buttonsFilter.map(button => (\n        <li key={button.text}>\n          <a\n            href={button.href}\n            className={cn({ selected: filterType === `${button.text}` })}\n            onClick={e => setFilter(e.target.text)}\n          >\n            {button.text}\n          </a>\n        </li>\n      ))}\n    </ul>\n    {visibleClearCompleted\n        && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={clearCompleted}\n          >\n            Clear completed\n          </button>\n        )\n    }\n  </footer>\n);\n\nFooter.propTypes = {\n  noComlpetedTodo: PropTypes.number.isRequired,\n  setFilter: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  visibleClearCompleted: PropTypes.bool.isRequired,\n  filterType: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst filterTypes = {\n  active: 'Active',\n  completed: 'Completed',\n  all: 'All',\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filterType: filterTypes.all,\n  }\n\n  componentDidMount() {\n    const data = JSON.parse(localStorage.getItem('todoApp'));\n\n    if (data) {\n      this.setState({\n        ...data,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoApp', JSON.stringify(this.state));\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  makeIdTodo = () => {\n    const maxId = Math.max(...this.state.todos.map(todo => todo.id));\n    const maxIdTodo = maxId !== -Infinity ? maxId : 1;\n\n    return maxIdTodo;\n  }\n\n  saveChangesTodo = (todoId, todoTitle) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            title: todoTitle,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  changesStatusTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  selectAllTodos = (completedStatusTodos) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: !completedStatusTodos,\n      })),\n    }));\n  }\n\n  setFilter = (filterType) => {\n    this.setState({\n      filterType,\n    });\n  }\n\n  getVisibleTodos = () => {\n    const { todos, filterType } = this.state;\n\n    if (filterType === filterTypes.active) {\n      return todos.filter(todo => !todo.completed);\n    }\n\n    if (filterType === filterTypes.completed) {\n      return todos.filter(todo => todo.completed);\n    }\n\n    return todos;\n  }\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  render() {\n    const { todos, filterType } = this.state;\n    const todoId = this.makeIdTodo();\n    const initialDisplay = (todos.length === 0);\n    const completedStatusTodos = todos.length === 0\n      ? false\n      : todos.every(todo => todo.completed);\n\n    const visibleClearCompleted = todos.some(todo => todo.completed);\n    const incompleteTodosSum = todos.filter(todo => !todo.completed).length;\n    const visibleTodos = this.getVisibleTodos(filterType);\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          addTodo={this.addTodo}\n          todoId={todoId}\n        />\n\n        <section className=\"main\">\n          {!initialDisplay && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                checked={completedStatusTodos}\n                onChange={() => this.selectAllTodos(completedStatusTodos)}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n          <TodoList\n            todos={visibleTodos}\n            changesStatusTodo={this.changesStatusTodo}\n            deleteTodo={this.deleteTodo}\n            saveChangesTodo={this.saveChangesTodo}\n          />\n        </section>\n\n        {\n          !initialDisplay\n          && (\n            <Footer\n              noComlpetedTodo={incompleteTodosSum}\n              setFilter={this.setFilter}\n              clearCompleted={this.clearCompleted}\n              visibleClearCompleted={visibleClearCompleted}\n              filterType={filterType}\n            />\n          )\n        }\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}