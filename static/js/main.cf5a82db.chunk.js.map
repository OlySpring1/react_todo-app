{"version":3,"sources":["Todo.js","TodoList.js","Header.js","TodosFilter.js","Footer.js","App.js","index.js"],"names":["Todo","id","title","completed","onSelected","className","cn","type","checked","onChange","htmlFor","TodoList","state","isToggleOn","handleClick","setState","prevState","props","onAllSelected","this","todos","onTodoSelected","comletedStatus","value","map","todo","key","React","Component","defaultProps","Header","handleTitle","target","trim","handleSubmit","event","preventDefault","onTodo","Date","onSubmit","placeholder","TodosFilter","href","text","filterButtons","Footer","noComletedTodo","onFilteredTodos","button","App","typeFilter","addTodo","todoId","select","selectFilter","filter","length","every","counter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf5a82db.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames/bind';\nimport PropTypes from 'prop-types';\n\nconst Todo = ({ id, title, completed, onSelected }) => (\n// handleChecked = (event) => {\n//   const id = event.target.id;\n// console.log('event.target',event.target);\n\n  //   this.props.onSelected(id);\n  //   this.setState(prevState => ({\n  //     completed: !prevState.completed\n  //   }))\n  // }\n\n  <li className={cn({ completed: completed === true })}>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={id}\n        checked={completed}\n        onChange={onSelected}\n      />\n      <label htmlFor={id}>{title}</label>\n      <button type=\"button\" className=\"destroy\" />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  onSelected: PropTypes.func.isRequired,\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nclass TodoList extends React.Component {\n  state={\n    isToggleOn: true,\n  }\n\n  handleClick = () => {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn,\n    }));\n\n    this.props.onAllSelected(this.state.isToggleOn);\n  }\n\n  render() {\n    const { todos, onTodoSelected } = this.props;\n\n    return (\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={this.props.comletedStatus}\n          value={this.state.isToggleOn}\n          onChange={this.handleClick}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {todos.map(todo => (\n            <Todo\n              {...todo}\n              key={todo.id}\n              onSelected={() => onTodoSelected(todo.id)}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object),\n  comletedStatus: PropTypes.bool.isRequired,\n  onAllSelected: PropTypes.func.isRequired,\n  onTodoSelected: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state={\n    title: '',\n    id: '',\n    completed: false,\n  }\n\n  handleTitle = ({ target }) => (\n    this.setState({\n      title: target.value.trim(),\n    })\n  )\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.onTodo({\n      ...this.state,\n      id: +new Date(),\n    });\n\n    this.setState({\n      title: '',\n    });\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={this.handleTitle}\n          />\n        </header>\n      </form>\n\n    );\n  }\n}\n\nHeader.propTypes = {\n  onTodo: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodosFilter = ({ href, text }) => (\n  <li>\n    <a\n      href={href}\n      target={text}\n    >\n      {text}\n    </a>\n  </li>\n);\n\nTodosFilter.propTypes = {\n  href: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodosFilter from './TodosFilter';\n\nconst filterButtons = [\n  {\n    href: '#/',\n    text: 'All',\n  },\n  {\n    href: '#/active',\n    text: 'Active',\n  },\n  {\n    href: '#/completed',\n    text: 'Completed',\n  },\n];\n\nconst Footer = ({ noComletedTodo, onFilteredTodos }) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {noComletedTodo}\n      {' '}\n      items left\n    </span>\n\n    <ul className=\"filters\">\n      {filterButtons.map(button => (\n        <TodosFilter {...button} key={button.text} />\n      ))}\n    </ul>\n    <button type=\"button\" className=\"clear-completed\">\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  noComletedTodo: PropTypes.number.isRequired,\n  onFilteredTodos: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport Header from './Header';\nimport Footer from './Footer';\n\nclass App extends React.Component {\n  state={\n    todos: [],\n    typeFilter: '',\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  onTodoSelected = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  onAllSelected = (select) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (select) {\n          return {\n            ...todo,\n            completed: true,\n          };\n        }\n\n        return {\n          ...todo,\n          completed: false,\n        };\n      }),\n    }));\n  }\n\n    onFilteredTodos = (typeFilter) => {\n      this.setState({\n        typeFilter,\n      });\n    }\n\n    selectFilter = () => {\n      const { todos, typeFilter } = this.state;\n\n      if (typeFilter === 'Active') {\n        return todos.filter(todo => !todo.completed);\n      }\n\n      if (typeFilter === 'Completed') {\n        return todos.filter(todo => todo.completed);\n      }\n\n      if (typeFilter === 'All') {\n        return todos;\n      }\n\n      return todos;\n    }\n\n    render() {\n      const { todos } = this.state;\n      const comletedStatus = todos.length === 0\n        ? false\n        : todos.every(todo => todo.completed);\n      const counter = todos.filter(todo => !todo.completed).length;\n      // const visibleTodos = this.selectFilter(typeFilter);\n\n      return (\n        <section className=\"todoapp\">\n          <Header onTodo={this.addTodo} />\n          <TodoList\n            todos={todos}\n            comletedStatus={comletedStatus}\n            onFilteredTodos={this.onFilteredTodos}\n            onAllSelected={this.onAllSelected}\n            onTodoSelected={this.onTodoSelected}\n          />\n\n          <Footer noComletedTodo={counter} />\n        </section>\n      );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}